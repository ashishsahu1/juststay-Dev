//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JustStay.ATRC.UserServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDto", Namespace="http://schemas.datacontract.org/2004/07/JustStay.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class UserDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ATRCIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ATRCNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ATRCStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DOBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Google_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> InsertedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPaidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MobileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> UpdatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ATRCId {
            get {
                return this.ATRCIdField;
            }
            set {
                if ((this.ATRCIdField.Equals(value) != true)) {
                    this.ATRCIdField = value;
                    this.RaisePropertyChanged("ATRCId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ATRCName {
            get {
                return this.ATRCNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ATRCNameField, value) != true)) {
                    this.ATRCNameField = value;
                    this.RaisePropertyChanged("ATRCName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ATRCStatus {
            get {
                return this.ATRCStatusField;
            }
            set {
                if ((this.ATRCStatusField.Equals(value) != true)) {
                    this.ATRCStatusField = value;
                    this.RaisePropertyChanged("ATRCStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((this.CustomerIdField.Equals(value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DOB {
            get {
                return this.DOBField;
            }
            set {
                if ((object.ReferenceEquals(this.DOBField, value) != true)) {
                    this.DOBField = value;
                    this.RaisePropertyChanged("DOB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderField, value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Google_Id {
            get {
                return this.Google_IdField;
            }
            set {
                if ((object.ReferenceEquals(this.Google_IdField, value) != true)) {
                    this.Google_IdField = value;
                    this.RaisePropertyChanged("Google_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> InsertedOn {
            get {
                return this.InsertedOnField;
            }
            set {
                if ((this.InsertedOnField.Equals(value) != true)) {
                    this.InsertedOnField = value;
                    this.RaisePropertyChanged("InsertedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsPaid {
            get {
                return this.IsPaidField;
            }
            set {
                if ((this.IsPaidField.Equals(value) != true)) {
                    this.IsPaidField = value;
                    this.RaisePropertyChanged("IsPaid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mobile {
            get {
                return this.MobileField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileField, value) != true)) {
                    this.MobileField = value;
                    this.RaisePropertyChanged("Mobile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RoleId {
            get {
                return this.RoleIdField;
            }
            set {
                if ((this.RoleIdField.Equals(value) != true)) {
                    this.RoleIdField = value;
                    this.RaisePropertyChanged("RoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UpdatedOn {
            get {
                return this.UpdatedOnField;
            }
            set {
                if ((this.UpdatedOnField.Equals(value) != true)) {
                    this.UpdatedOnField = value;
                    this.RaisePropertyChanged("UpdatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserType {
            get {
                return this.UserTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.UserTypeField, value) != true)) {
                    this.UserTypeField = value;
                    this.RaisePropertyChanged("UserType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserTypeId {
            get {
                return this.UserTypeIdField;
            }
            set {
                if ((this.UserTypeIdField.Equals(value) != true)) {
                    this.UserTypeIdField = value;
                    this.RaisePropertyChanged("UserTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserServiceReference.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserbyId", ReplyAction="http://tempuri.org/IUserService/GetUserbyIdResponse")]
        JustStay.ATRC.UserServiceReference.UserDto GetUserbyId(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserbyId", ReplyAction="http://tempuri.org/IUserService/GetUserbyIdResponse")]
        System.Threading.Tasks.Task<JustStay.ATRC.UserServiceReference.UserDto> GetUserbyIdAsync(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/InsertUser", ReplyAction="http://tempuri.org/IUserService/InsertUserResponse")]
        int InsertUser(JustStay.ATRC.UserServiceReference.UserDto userdto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/InsertUser", ReplyAction="http://tempuri.org/IUserService/InsertUserResponse")]
        System.Threading.Tasks.Task<int> InsertUserAsync(JustStay.ATRC.UserServiceReference.UserDto userdto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserPwd", ReplyAction="http://tempuri.org/IUserService/UpdateUserPwdResponse")]
        int UpdateUserPwd(JustStay.ATRC.UserServiceReference.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserPwd", ReplyAction="http://tempuri.org/IUserService/UpdateUserPwdResponse")]
        System.Threading.Tasks.Task<int> UpdateUserPwdAsync(JustStay.ATRC.UserServiceReference.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserDetails", ReplyAction="http://tempuri.org/IUserService/GetUserDetailsResponse")]
        JustStay.ATRC.UserServiceReference.UserDto GetUserDetails(string username, string password, int usertypeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserDetails", ReplyAction="http://tempuri.org/IUserService/GetUserDetailsResponse")]
        System.Threading.Tasks.Task<JustStay.ATRC.UserServiceReference.UserDto> GetUserDetailsAsync(string username, string password, int usertypeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UserList", ReplyAction="http://tempuri.org/IUserService/UserListResponse")]
        JustStay.ATRC.UserServiceReference.UserDto[] UserList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UserList", ReplyAction="http://tempuri.org/IUserService/UserListResponse")]
        System.Threading.Tasks.Task<JustStay.ATRC.UserServiceReference.UserDto[]> UserListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        int DeleteUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsEmailExist", ReplyAction="http://tempuri.org/IUserService/IsEmailExistResponse")]
        bool IsEmailExist(string email, int userTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsEmailExist", ReplyAction="http://tempuri.org/IUserService/IsEmailExistResponse")]
        System.Threading.Tasks.Task<bool> IsEmailExistAsync(string email, int userTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAutoCompleteEmailList", ReplyAction="http://tempuri.org/IUserService/GetAutoCompleteEmailListResponse")]
        string GetAutoCompleteEmailList(string userName, string mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAutoCompleteEmailList", ReplyAction="http://tempuri.org/IUserService/GetAutoCompleteEmailListResponse")]
        System.Threading.Tasks.Task<string> GetAutoCompleteEmailListAsync(string userName, string mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserIdByEmailAndUserType", ReplyAction="http://tempuri.org/IUserService/GetUserIdByEmailAndUserTypeResponse")]
        int GetUserIdByEmailAndUserType(string email, string userType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserIdByEmailAndUserType", ReplyAction="http://tempuri.org/IUserService/GetUserIdByEmailAndUserTypeResponse")]
        System.Threading.Tasks.Task<int> GetUserIdByEmailAndUserTypeAsync(string email, string userType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsMobileExist", ReplyAction="http://tempuri.org/IUserService/IsMobileExistResponse")]
        bool IsMobileExist(string mobile, int userTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsMobileExist", ReplyAction="http://tempuri.org/IUserService/IsMobileExistResponse")]
        System.Threading.Tasks.Task<bool> IsMobileExistAsync(string mobile, int userTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetCustUserByUsernameOrMobile", ReplyAction="http://tempuri.org/IUserService/GetCustUserByUsernameOrMobileResponse")]
        JustStay.ATRC.UserServiceReference.UserDto GetCustUserByUsernameOrMobile(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetCustUserByUsernameOrMobile", ReplyAction="http://tempuri.org/IUserService/GetCustUserByUsernameOrMobileResponse")]
        System.Threading.Tasks.Task<JustStay.ATRC.UserServiceReference.UserDto> GetCustUserByUsernameOrMobileAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetGoogleUser", ReplyAction="http://tempuri.org/IUserService/GetGoogleUserResponse")]
        JustStay.ATRC.UserServiceReference.UserDto GetGoogleUser(string googleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetGoogleUser", ReplyAction="http://tempuri.org/IUserService/GetGoogleUserResponse")]
        System.Threading.Tasks.Task<JustStay.ATRC.UserServiceReference.UserDto> GetGoogleUserAsync(string googleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserGoogleId", ReplyAction="http://tempuri.org/IUserService/UpdateUserGoogleIdResponse")]
        void UpdateUserGoogleId(int userId, string googleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserGoogleId", ReplyAction="http://tempuri.org/IUserService/UpdateUserGoogleIdResponse")]
        System.Threading.Tasks.Task UpdateUserGoogleIdAsync(int userId, string googleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ChangeUserPassword", ReplyAction="http://tempuri.org/IUserService/ChangeUserPasswordResponse")]
        bool ChangeUserPassword(int id, string newpass, string cnfpass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ChangeUserPassword", ReplyAction="http://tempuri.org/IUserService/ChangeUserPasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(int id, string newpass, string cnfpass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        int UpdateUser(int id, string Name, string mobile, string email, string isactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(int id, string Name, string mobile, string email, string isactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateAdmin", ReplyAction="http://tempuri.org/IUserService/UpdateAdminResponse")]
        int UpdateAdmin(JustStay.ATRC.UserServiceReference.UserDto usrdto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateAdmin", ReplyAction="http://tempuri.org/IUserService/UpdateAdminResponse")]
        System.Threading.Tasks.Task<int> UpdateAdminAsync(JustStay.ATRC.UserServiceReference.UserDto usrdto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : JustStay.ATRC.UserServiceReference.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<JustStay.ATRC.UserServiceReference.IUserService>, JustStay.ATRC.UserServiceReference.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JustStay.ATRC.UserServiceReference.UserDto GetUserbyId(int uid) {
            return base.Channel.GetUserbyId(uid);
        }
        
        public System.Threading.Tasks.Task<JustStay.ATRC.UserServiceReference.UserDto> GetUserbyIdAsync(int uid) {
            return base.Channel.GetUserbyIdAsync(uid);
        }
        
        public int InsertUser(JustStay.ATRC.UserServiceReference.UserDto userdto) {
            return base.Channel.InsertUser(userdto);
        }
        
        public System.Threading.Tasks.Task<int> InsertUserAsync(JustStay.ATRC.UserServiceReference.UserDto userdto) {
            return base.Channel.InsertUserAsync(userdto);
        }
        
        public int UpdateUserPwd(JustStay.ATRC.UserServiceReference.UserDto user) {
            return base.Channel.UpdateUserPwd(user);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserPwdAsync(JustStay.ATRC.UserServiceReference.UserDto user) {
            return base.Channel.UpdateUserPwdAsync(user);
        }
        
        public JustStay.ATRC.UserServiceReference.UserDto GetUserDetails(string username, string password, int usertypeid) {
            return base.Channel.GetUserDetails(username, password, usertypeid);
        }
        
        public System.Threading.Tasks.Task<JustStay.ATRC.UserServiceReference.UserDto> GetUserDetailsAsync(string username, string password, int usertypeid) {
            return base.Channel.GetUserDetailsAsync(username, password, usertypeid);
        }
        
        public JustStay.ATRC.UserServiceReference.UserDto[] UserList() {
            return base.Channel.UserList();
        }
        
        public System.Threading.Tasks.Task<JustStay.ATRC.UserServiceReference.UserDto[]> UserListAsync() {
            return base.Channel.UserListAsync();
        }
        
        public int DeleteUser(int id) {
            return base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsync(int id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public bool IsEmailExist(string email, int userTypeId) {
            return base.Channel.IsEmailExist(email, userTypeId);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmailExistAsync(string email, int userTypeId) {
            return base.Channel.IsEmailExistAsync(email, userTypeId);
        }
        
        public string GetAutoCompleteEmailList(string userName, string mode) {
            return base.Channel.GetAutoCompleteEmailList(userName, mode);
        }
        
        public System.Threading.Tasks.Task<string> GetAutoCompleteEmailListAsync(string userName, string mode) {
            return base.Channel.GetAutoCompleteEmailListAsync(userName, mode);
        }
        
        public int GetUserIdByEmailAndUserType(string email, string userType) {
            return base.Channel.GetUserIdByEmailAndUserType(email, userType);
        }
        
        public System.Threading.Tasks.Task<int> GetUserIdByEmailAndUserTypeAsync(string email, string userType) {
            return base.Channel.GetUserIdByEmailAndUserTypeAsync(email, userType);
        }
        
        public bool IsMobileExist(string mobile, int userTypeId) {
            return base.Channel.IsMobileExist(mobile, userTypeId);
        }
        
        public System.Threading.Tasks.Task<bool> IsMobileExistAsync(string mobile, int userTypeId) {
            return base.Channel.IsMobileExistAsync(mobile, userTypeId);
        }
        
        public JustStay.ATRC.UserServiceReference.UserDto GetCustUserByUsernameOrMobile(string userName) {
            return base.Channel.GetCustUserByUsernameOrMobile(userName);
        }
        
        public System.Threading.Tasks.Task<JustStay.ATRC.UserServiceReference.UserDto> GetCustUserByUsernameOrMobileAsync(string userName) {
            return base.Channel.GetCustUserByUsernameOrMobileAsync(userName);
        }
        
        public JustStay.ATRC.UserServiceReference.UserDto GetGoogleUser(string googleId) {
            return base.Channel.GetGoogleUser(googleId);
        }
        
        public System.Threading.Tasks.Task<JustStay.ATRC.UserServiceReference.UserDto> GetGoogleUserAsync(string googleId) {
            return base.Channel.GetGoogleUserAsync(googleId);
        }
        
        public void UpdateUserGoogleId(int userId, string googleId) {
            base.Channel.UpdateUserGoogleId(userId, googleId);
        }
        
        public System.Threading.Tasks.Task UpdateUserGoogleIdAsync(int userId, string googleId) {
            return base.Channel.UpdateUserGoogleIdAsync(userId, googleId);
        }
        
        public bool ChangeUserPassword(int id, string newpass, string cnfpass) {
            return base.Channel.ChangeUserPassword(id, newpass, cnfpass);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(int id, string newpass, string cnfpass) {
            return base.Channel.ChangeUserPasswordAsync(id, newpass, cnfpass);
        }
        
        public int UpdateUser(int id, string Name, string mobile, string email, string isactive) {
            return base.Channel.UpdateUser(id, Name, mobile, email, isactive);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(int id, string Name, string mobile, string email, string isactive) {
            return base.Channel.UpdateUserAsync(id, Name, mobile, email, isactive);
        }
        
        public int UpdateAdmin(JustStay.ATRC.UserServiceReference.UserDto usrdto) {
            return base.Channel.UpdateAdmin(usrdto);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAdminAsync(JustStay.ATRC.UserServiceReference.UserDto usrdto) {
            return base.Channel.UpdateAdminAsync(usrdto);
        }
    }
}
