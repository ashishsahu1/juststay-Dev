//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JustStay.Web.FAQServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FAQServiceReference.IFAQService")]
    public interface IFAQService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFAQService/GetFAQByAudience", ReplyAction="http://tempuri.org/IFAQService/GetFAQByAudienceResponse")]
        JustStay.Services.DTO.FAQDto[] GetFAQByAudience(int audId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFAQService/GetFAQByAudience", ReplyAction="http://tempuri.org/IFAQService/GetFAQByAudienceResponse")]
        System.Threading.Tasks.Task<JustStay.Services.DTO.FAQDto[]> GetFAQByAudienceAsync(int audId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFAQService/GetFAQById", ReplyAction="http://tempuri.org/IFAQService/GetFAQByIdResponse")]
        JustStay.Services.DTO.FAQDto GetFAQById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFAQService/GetFAQById", ReplyAction="http://tempuri.org/IFAQService/GetFAQByIdResponse")]
        System.Threading.Tasks.Task<JustStay.Services.DTO.FAQDto> GetFAQByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFAQService/InsertFAQ", ReplyAction="http://tempuri.org/IFAQService/InsertFAQResponse")]
        void InsertFAQ(JustStay.Services.DTO.FAQDto faqDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFAQService/InsertFAQ", ReplyAction="http://tempuri.org/IFAQService/InsertFAQResponse")]
        System.Threading.Tasks.Task InsertFAQAsync(JustStay.Services.DTO.FAQDto faqDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFAQService/UpdateFAQ", ReplyAction="http://tempuri.org/IFAQService/UpdateFAQResponse")]
        void UpdateFAQ(JustStay.Services.DTO.FAQDto faqDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFAQService/UpdateFAQ", ReplyAction="http://tempuri.org/IFAQService/UpdateFAQResponse")]
        System.Threading.Tasks.Task UpdateFAQAsync(JustStay.Services.DTO.FAQDto faqDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFAQService/DeleteFAQ", ReplyAction="http://tempuri.org/IFAQService/DeleteFAQResponse")]
        void DeleteFAQ(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFAQService/DeleteFAQ", ReplyAction="http://tempuri.org/IFAQService/DeleteFAQResponse")]
        System.Threading.Tasks.Task DeleteFAQAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFAQServiceChannel : JustStay.Web.FAQServiceReference.IFAQService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FAQServiceClient : System.ServiceModel.ClientBase<JustStay.Web.FAQServiceReference.IFAQService>, JustStay.Web.FAQServiceReference.IFAQService {
        
        public FAQServiceClient() {
        }
        
        public FAQServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FAQServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FAQServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FAQServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JustStay.Services.DTO.FAQDto[] GetFAQByAudience(int audId) {
            return base.Channel.GetFAQByAudience(audId);
        }
        
        public System.Threading.Tasks.Task<JustStay.Services.DTO.FAQDto[]> GetFAQByAudienceAsync(int audId) {
            return base.Channel.GetFAQByAudienceAsync(audId);
        }
        
        public JustStay.Services.DTO.FAQDto GetFAQById(int id) {
            return base.Channel.GetFAQById(id);
        }
        
        public System.Threading.Tasks.Task<JustStay.Services.DTO.FAQDto> GetFAQByIdAsync(int id) {
            return base.Channel.GetFAQByIdAsync(id);
        }
        
        public void InsertFAQ(JustStay.Services.DTO.FAQDto faqDto) {
            base.Channel.InsertFAQ(faqDto);
        }
        
        public System.Threading.Tasks.Task InsertFAQAsync(JustStay.Services.DTO.FAQDto faqDto) {
            return base.Channel.InsertFAQAsync(faqDto);
        }
        
        public void UpdateFAQ(JustStay.Services.DTO.FAQDto faqDto) {
            base.Channel.UpdateFAQ(faqDto);
        }
        
        public System.Threading.Tasks.Task UpdateFAQAsync(JustStay.Services.DTO.FAQDto faqDto) {
            return base.Channel.UpdateFAQAsync(faqDto);
        }
        
        public void DeleteFAQ(int id) {
            base.Channel.DeleteFAQ(id);
        }
        
        public System.Threading.Tasks.Task DeleteFAQAsync(int id) {
            return base.Channel.DeleteFAQAsync(id);
        }
    }
}
