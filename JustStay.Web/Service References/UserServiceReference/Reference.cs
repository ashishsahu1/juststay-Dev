//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JustStay.Web.UserServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserServiceReference.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserbyId", ReplyAction="http://tempuri.org/IUserService/GetUserbyIdResponse")]
        JustStay.Services.DTO.UserDto GetUserbyId(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserbyId", ReplyAction="http://tempuri.org/IUserService/GetUserbyIdResponse")]
        System.Threading.Tasks.Task<JustStay.Services.DTO.UserDto> GetUserbyIdAsync(int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/InsertUser", ReplyAction="http://tempuri.org/IUserService/InsertUserResponse")]
        int InsertUser(JustStay.Services.DTO.UserDto userdto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/InsertUser", ReplyAction="http://tempuri.org/IUserService/InsertUserResponse")]
        System.Threading.Tasks.Task<int> InsertUserAsync(JustStay.Services.DTO.UserDto userdto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserPwd", ReplyAction="http://tempuri.org/IUserService/UpdateUserPwdResponse")]
        int UpdateUserPwd(JustStay.Services.DTO.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserPwd", ReplyAction="http://tempuri.org/IUserService/UpdateUserPwdResponse")]
        System.Threading.Tasks.Task<int> UpdateUserPwdAsync(JustStay.Services.DTO.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserDetails", ReplyAction="http://tempuri.org/IUserService/GetUserDetailsResponse")]
        JustStay.Services.DTO.UserDto GetUserDetails(string username, string password, int usertypeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserDetails", ReplyAction="http://tempuri.org/IUserService/GetUserDetailsResponse")]
        System.Threading.Tasks.Task<JustStay.Services.DTO.UserDto> GetUserDetailsAsync(string username, string password, int usertypeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UserList", ReplyAction="http://tempuri.org/IUserService/UserListResponse")]
        JustStay.Services.DTO.UserDto[] UserList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UserList", ReplyAction="http://tempuri.org/IUserService/UserListResponse")]
        System.Threading.Tasks.Task<JustStay.Services.DTO.UserDto[]> UserListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        int DeleteUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsEmailExist", ReplyAction="http://tempuri.org/IUserService/IsEmailExistResponse")]
        bool IsEmailExist(string email, int userTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsEmailExist", ReplyAction="http://tempuri.org/IUserService/IsEmailExistResponse")]
        System.Threading.Tasks.Task<bool> IsEmailExistAsync(string email, int userTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAutoCompleteEmailList", ReplyAction="http://tempuri.org/IUserService/GetAutoCompleteEmailListResponse")]
        string GetAutoCompleteEmailList(string userName, string mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAutoCompleteEmailList", ReplyAction="http://tempuri.org/IUserService/GetAutoCompleteEmailListResponse")]
        System.Threading.Tasks.Task<string> GetAutoCompleteEmailListAsync(string userName, string mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserIdByEmailAndUserType", ReplyAction="http://tempuri.org/IUserService/GetUserIdByEmailAndUserTypeResponse")]
        int GetUserIdByEmailAndUserType(string email, string userType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserIdByEmailAndUserType", ReplyAction="http://tempuri.org/IUserService/GetUserIdByEmailAndUserTypeResponse")]
        System.Threading.Tasks.Task<int> GetUserIdByEmailAndUserTypeAsync(string email, string userType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsMobileExist", ReplyAction="http://tempuri.org/IUserService/IsMobileExistResponse")]
        bool IsMobileExist(string mobile, int userTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsMobileExist", ReplyAction="http://tempuri.org/IUserService/IsMobileExistResponse")]
        System.Threading.Tasks.Task<bool> IsMobileExistAsync(string mobile, int userTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetCustUserByUsernameOrMobile", ReplyAction="http://tempuri.org/IUserService/GetCustUserByUsernameOrMobileResponse")]
        JustStay.Services.DTO.UserDto GetCustUserByUsernameOrMobile(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetCustUserByUsernameOrMobile", ReplyAction="http://tempuri.org/IUserService/GetCustUserByUsernameOrMobileResponse")]
        System.Threading.Tasks.Task<JustStay.Services.DTO.UserDto> GetCustUserByUsernameOrMobileAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetGoogleUser", ReplyAction="http://tempuri.org/IUserService/GetGoogleUserResponse")]
        JustStay.Services.DTO.UserDto GetGoogleUser(string googleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetGoogleUser", ReplyAction="http://tempuri.org/IUserService/GetGoogleUserResponse")]
        System.Threading.Tasks.Task<JustStay.Services.DTO.UserDto> GetGoogleUserAsync(string googleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserGoogleId", ReplyAction="http://tempuri.org/IUserService/UpdateUserGoogleIdResponse")]
        void UpdateUserGoogleId(int userId, string googleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserGoogleId", ReplyAction="http://tempuri.org/IUserService/UpdateUserGoogleIdResponse")]
        System.Threading.Tasks.Task UpdateUserGoogleIdAsync(int userId, string googleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ChangeUserPassword", ReplyAction="http://tempuri.org/IUserService/ChangeUserPasswordResponse")]
        bool ChangeUserPassword(int id, string newpass, string cnfpass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ChangeUserPassword", ReplyAction="http://tempuri.org/IUserService/ChangeUserPasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(int id, string newpass, string cnfpass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        int UpdateUser(int id, string Name, string mobile, string email, string isactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(int id, string Name, string mobile, string email, string isactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateAdmin", ReplyAction="http://tempuri.org/IUserService/UpdateAdminResponse")]
        int UpdateAdmin(JustStay.Services.DTO.UserDto usrdto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateAdmin", ReplyAction="http://tempuri.org/IUserService/UpdateAdminResponse")]
        System.Threading.Tasks.Task<int> UpdateAdminAsync(JustStay.Services.DTO.UserDto usrdto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : JustStay.Web.UserServiceReference.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<JustStay.Web.UserServiceReference.IUserService>, JustStay.Web.UserServiceReference.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JustStay.Services.DTO.UserDto GetUserbyId(int uid) {
            return base.Channel.GetUserbyId(uid);
        }
        
        public System.Threading.Tasks.Task<JustStay.Services.DTO.UserDto> GetUserbyIdAsync(int uid) {
            return base.Channel.GetUserbyIdAsync(uid);
        }
        
        public int InsertUser(JustStay.Services.DTO.UserDto userdto) {
            return base.Channel.InsertUser(userdto);
        }
        
        public System.Threading.Tasks.Task<int> InsertUserAsync(JustStay.Services.DTO.UserDto userdto) {
            return base.Channel.InsertUserAsync(userdto);
        }
        
        public int UpdateUserPwd(JustStay.Services.DTO.UserDto user) {
            return base.Channel.UpdateUserPwd(user);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserPwdAsync(JustStay.Services.DTO.UserDto user) {
            return base.Channel.UpdateUserPwdAsync(user);
        }
        
        public JustStay.Services.DTO.UserDto GetUserDetails(string username, string password, int usertypeid) {
            return base.Channel.GetUserDetails(username, password, usertypeid);
        }
        
        public System.Threading.Tasks.Task<JustStay.Services.DTO.UserDto> GetUserDetailsAsync(string username, string password, int usertypeid) {
            return base.Channel.GetUserDetailsAsync(username, password, usertypeid);
        }
        
        public JustStay.Services.DTO.UserDto[] UserList() {
            return base.Channel.UserList();
        }
        
        public System.Threading.Tasks.Task<JustStay.Services.DTO.UserDto[]> UserListAsync() {
            return base.Channel.UserListAsync();
        }
        
        public int DeleteUser(int id) {
            return base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsync(int id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public bool IsEmailExist(string email, int userTypeId) {
            return base.Channel.IsEmailExist(email, userTypeId);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmailExistAsync(string email, int userTypeId) {
            return base.Channel.IsEmailExistAsync(email, userTypeId);
        }
        
        public string GetAutoCompleteEmailList(string userName, string mode) {
            return base.Channel.GetAutoCompleteEmailList(userName, mode);
        }
        
        public System.Threading.Tasks.Task<string> GetAutoCompleteEmailListAsync(string userName, string mode) {
            return base.Channel.GetAutoCompleteEmailListAsync(userName, mode);
        }
        
        public int GetUserIdByEmailAndUserType(string email, string userType) {
            return base.Channel.GetUserIdByEmailAndUserType(email, userType);
        }
        
        public System.Threading.Tasks.Task<int> GetUserIdByEmailAndUserTypeAsync(string email, string userType) {
            return base.Channel.GetUserIdByEmailAndUserTypeAsync(email, userType);
        }
        
        public bool IsMobileExist(string mobile, int userTypeId) {
            return base.Channel.IsMobileExist(mobile, userTypeId);
        }
        
        public System.Threading.Tasks.Task<bool> IsMobileExistAsync(string mobile, int userTypeId) {
            return base.Channel.IsMobileExistAsync(mobile, userTypeId);
        }
        
        public JustStay.Services.DTO.UserDto GetCustUserByUsernameOrMobile(string userName) {
            return base.Channel.GetCustUserByUsernameOrMobile(userName);
        }
        
        public System.Threading.Tasks.Task<JustStay.Services.DTO.UserDto> GetCustUserByUsernameOrMobileAsync(string userName) {
            return base.Channel.GetCustUserByUsernameOrMobileAsync(userName);
        }
        
        public JustStay.Services.DTO.UserDto GetGoogleUser(string googleId) {
            return base.Channel.GetGoogleUser(googleId);
        }
        
        public System.Threading.Tasks.Task<JustStay.Services.DTO.UserDto> GetGoogleUserAsync(string googleId) {
            return base.Channel.GetGoogleUserAsync(googleId);
        }
        
        public void UpdateUserGoogleId(int userId, string googleId) {
            base.Channel.UpdateUserGoogleId(userId, googleId);
        }
        
        public System.Threading.Tasks.Task UpdateUserGoogleIdAsync(int userId, string googleId) {
            return base.Channel.UpdateUserGoogleIdAsync(userId, googleId);
        }
        
        public bool ChangeUserPassword(int id, string newpass, string cnfpass) {
            return base.Channel.ChangeUserPassword(id, newpass, cnfpass);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(int id, string newpass, string cnfpass) {
            return base.Channel.ChangeUserPasswordAsync(id, newpass, cnfpass);
        }
        
        public int UpdateUser(int id, string Name, string mobile, string email, string isactive) {
            return base.Channel.UpdateUser(id, Name, mobile, email, isactive);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(int id, string Name, string mobile, string email, string isactive) {
            return base.Channel.UpdateUserAsync(id, Name, mobile, email, isactive);
        }
        
        public int UpdateAdmin(JustStay.Services.DTO.UserDto usrdto) {
            return base.Channel.UpdateAdmin(usrdto);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAdminAsync(JustStay.Services.DTO.UserDto usrdto) {
            return base.Channel.UpdateAdminAsync(usrdto);
        }
    }
}
