//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JustStay.Web.CommonServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="State", Namespace="http://schemas.datacontract.org/2004/07/JustStay.Repo")]
    [System.SerializableAttribute()]
    public partial class State : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameWithCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameWithCode {
            get {
                return this.NameWithCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.NameWithCodeField, value) != true)) {
                    this.NameWithCodeField = value;
                    this.RaisePropertyChanged("NameWithCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StateId {
            get {
                return this.StateIdField;
            }
            set {
                if ((this.StateIdField.Equals(value) != true)) {
                    this.StateIdField = value;
                    this.RaisePropertyChanged("StateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="City", Namespace="http://schemas.datacontract.org/2004/07/JustStay.Repo")]
    [System.SerializableAttribute()]
    public partial class City : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> InsertedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> UpdatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> latitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> longitudeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CityId {
            get {
                return this.CityIdField;
            }
            set {
                if ((this.CityIdField.Equals(value) != true)) {
                    this.CityIdField = value;
                    this.RaisePropertyChanged("CityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> InsertedOn {
            get {
                return this.InsertedOnField;
            }
            set {
                if ((this.InsertedOnField.Equals(value) != true)) {
                    this.InsertedOnField = value;
                    this.RaisePropertyChanged("InsertedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UpdatedOn {
            get {
                return this.UpdatedOnField;
            }
            set {
                if ((this.UpdatedOnField.Equals(value) != true)) {
                    this.UpdatedOnField = value;
                    this.RaisePropertyChanged("UpdatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> latitude {
            get {
                return this.latitudeField;
            }
            set {
                if ((this.latitudeField.Equals(value) != true)) {
                    this.latitudeField = value;
                    this.RaisePropertyChanged("latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> longitude {
            get {
                return this.longitudeField;
            }
            set {
                if ((this.longitudeField.Equals(value) != true)) {
                    this.longitudeField = value;
                    this.RaisePropertyChanged("longitude");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/JustStay.Repo")]
    [System.SerializableAttribute()]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> InsertedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LocationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> UpdatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> latitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> longitudeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CityId {
            get {
                return this.CityIdField;
            }
            set {
                if ((this.CityIdField.Equals(value) != true)) {
                    this.CityIdField = value;
                    this.RaisePropertyChanged("CityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> InsertedOn {
            get {
                return this.InsertedOnField;
            }
            set {
                if ((this.InsertedOnField.Equals(value) != true)) {
                    this.InsertedOnField = value;
                    this.RaisePropertyChanged("InsertedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocationId {
            get {
                return this.LocationIdField;
            }
            set {
                if ((this.LocationIdField.Equals(value) != true)) {
                    this.LocationIdField = value;
                    this.RaisePropertyChanged("LocationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UpdatedOn {
            get {
                return this.UpdatedOnField;
            }
            set {
                if ((this.UpdatedOnField.Equals(value) != true)) {
                    this.UpdatedOnField = value;
                    this.RaisePropertyChanged("UpdatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> latitude {
            get {
                return this.latitudeField;
            }
            set {
                if ((this.latitudeField.Equals(value) != true)) {
                    this.latitudeField = value;
                    this.RaisePropertyChanged("latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> longitude {
            get {
                return this.longitudeField;
            }
            set {
                if ((this.longitudeField.Equals(value) != true)) {
                    this.longitudeField = value;
                    this.RaisePropertyChanged("longitude");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ATRCCategory", Namespace="http://schemas.datacontract.org/2004/07/JustStay.Repo")]
    [System.SerializableAttribute()]
    public partial class ATRCCategory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ATRCCategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> InsertedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ATRCCategoryId {
            get {
                return this.ATRCCategoryIdField;
            }
            set {
                if ((this.ATRCCategoryIdField.Equals(value) != true)) {
                    this.ATRCCategoryIdField = value;
                    this.RaisePropertyChanged("ATRCCategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> InsertedOn {
            get {
                return this.InsertedOnField;
            }
            set {
                if ((this.InsertedOnField.Equals(value) != true)) {
                    this.InsertedOnField = value;
                    this.RaisePropertyChanged("InsertedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ATRCSubCategory", Namespace="http://schemas.datacontract.org/2004/07/JustStay.Repo")]
    [System.SerializableAttribute()]
    public partial class ATRCSubCategory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ATRCCategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ATRCSubCategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> InsertedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubCategoryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ATRCCategoryId {
            get {
                return this.ATRCCategoryIdField;
            }
            set {
                if ((this.ATRCCategoryIdField.Equals(value) != true)) {
                    this.ATRCCategoryIdField = value;
                    this.RaisePropertyChanged("ATRCCategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ATRCSubCategoryId {
            get {
                return this.ATRCSubCategoryIdField;
            }
            set {
                if ((this.ATRCSubCategoryIdField.Equals(value) != true)) {
                    this.ATRCSubCategoryIdField = value;
                    this.RaisePropertyChanged("ATRCSubCategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> InsertedOn {
            get {
                return this.InsertedOnField;
            }
            set {
                if ((this.InsertedOnField.Equals(value) != true)) {
                    this.InsertedOnField = value;
                    this.RaisePropertyChanged("InsertedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubCategory {
            get {
                return this.SubCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.SubCategoryField, value) != true)) {
                    this.SubCategoryField = value;
                    this.RaisePropertyChanged("SubCategory");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Localities", Namespace="http://schemas.datacontract.org/2004/07/JustStay.Repo")]
    [System.SerializableAttribute()]
    public partial class Localities : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((object.ReferenceEquals(this.ModeField, value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ATRCType", Namespace="http://schemas.datacontract.org/2004/07/JustStay.Repo")]
    [System.SerializableAttribute()]
    public partial class ATRCType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ATRCTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime InsertedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> UpdatedOnField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ATRCTypeId {
            get {
                return this.ATRCTypeIdField;
            }
            set {
                if ((this.ATRCTypeIdField.Equals(value) != true)) {
                    this.ATRCTypeIdField = value;
                    this.RaisePropertyChanged("ATRCTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime InsertedOn {
            get {
                return this.InsertedOnField;
            }
            set {
                if ((this.InsertedOnField.Equals(value) != true)) {
                    this.InsertedOnField = value;
                    this.RaisePropertyChanged("InsertedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UpdatedOn {
            get {
                return this.UpdatedOnField;
            }
            set {
                if ((this.UpdatedOnField.Equals(value) != true)) {
                    this.UpdatedOnField = value;
                    this.RaisePropertyChanged("UpdatedOn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CommonServiceReference.ICommonService")]
    public interface ICommonService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAllStates", ReplyAction="http://tempuri.org/ICommonService/GetAllStatesResponse")]
        JustStay.Web.CommonServiceReference.State[] GetAllStates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAllStates", ReplyAction="http://tempuri.org/ICommonService/GetAllStatesResponse")]
        System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.State[]> GetAllStatesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAllCities", ReplyAction="http://tempuri.org/ICommonService/GetAllCitiesResponse")]
        JustStay.Web.CommonServiceReference.City[] GetAllCities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAllCities", ReplyAction="http://tempuri.org/ICommonService/GetAllCitiesResponse")]
        System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.City[]> GetAllCitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAllCitiesBySearch", ReplyAction="http://tempuri.org/ICommonService/GetAllCitiesBySearchResponse")]
        JustStay.Web.CommonServiceReference.City[] GetAllCitiesBySearch(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAllCitiesBySearch", ReplyAction="http://tempuri.org/ICommonService/GetAllCitiesBySearchResponse")]
        System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.City[]> GetAllCitiesBySearchAsync(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAlLocationsByCity", ReplyAction="http://tempuri.org/ICommonService/GetAlLocationsByCityResponse")]
        JustStay.Web.CommonServiceReference.Location[] GetAlLocationsByCity(int cityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAlLocationsByCity", ReplyAction="http://tempuri.org/ICommonService/GetAlLocationsByCityResponse")]
        System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.Location[]> GetAlLocationsByCityAsync(int cityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAllATRCCategory", ReplyAction="http://tempuri.org/ICommonService/GetAllATRCCategoryResponse")]
        JustStay.Web.CommonServiceReference.ATRCCategory[] GetAllATRCCategory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAllATRCCategory", ReplyAction="http://tempuri.org/ICommonService/GetAllATRCCategoryResponse")]
        System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.ATRCCategory[]> GetAllATRCCategoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAllATRCSubCategory", ReplyAction="http://tempuri.org/ICommonService/GetAllATRCSubCategoryResponse")]
        JustStay.Web.CommonServiceReference.ATRCSubCategory[] GetAllATRCSubCategory(int categoryid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAllATRCSubCategory", ReplyAction="http://tempuri.org/ICommonService/GetAllATRCSubCategoryResponse")]
        System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.ATRCSubCategory[]> GetAllATRCSubCategoryAsync(int categoryid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetSettings", ReplyAction="http://tempuri.org/ICommonService/GetSettingsResponse")]
        JustStay.Services.DTO.SettingDto GetSettings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetSettings", ReplyAction="http://tempuri.org/ICommonService/GetSettingsResponse")]
        System.Threading.Tasks.Task<JustStay.Services.DTO.SettingDto> GetSettingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetSMSTemplateByName", ReplyAction="http://tempuri.org/ICommonService/GetSMSTemplateByNameResponse")]
        JustStay.Services.DTO.SMSTemplateDto GetSMSTemplateByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetSMSTemplateByName", ReplyAction="http://tempuri.org/ICommonService/GetSMSTemplateByNameResponse")]
        System.Threading.Tasks.Task<JustStay.Services.DTO.SMSTemplateDto> GetSMSTemplateByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAutoLocalities", ReplyAction="http://tempuri.org/ICommonService/GetAutoLocalitiesResponse")]
        JustStay.Web.CommonServiceReference.Localities[] GetAutoLocalities(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAutoLocalities", ReplyAction="http://tempuri.org/ICommonService/GetAutoLocalitiesResponse")]
        System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.Localities[]> GetAutoLocalitiesAsync(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetATRCTypes", ReplyAction="http://tempuri.org/ICommonService/GetATRCTypesResponse")]
        JustStay.Web.CommonServiceReference.ATRCType[] GetATRCTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetATRCTypes", ReplyAction="http://tempuri.org/ICommonService/GetATRCTypesResponse")]
        System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.ATRCType[]> GetATRCTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAttachementsByMaster", ReplyAction="http://tempuri.org/ICommonService/GetAttachementsByMasterResponse")]
        JustStay.Services.DTO.AttachmentDto[] GetAttachementsByMaster(int masterId, string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAttachementsByMaster", ReplyAction="http://tempuri.org/ICommonService/GetAttachementsByMasterResponse")]
        System.Threading.Tasks.Task<JustStay.Services.DTO.AttachmentDto[]> GetAttachementsByMasterAsync(int masterId, string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/InsertAttachment", ReplyAction="http://tempuri.org/ICommonService/InsertAttachmentResponse")]
        void InsertAttachment(JustStay.Services.DTO.AttachmentDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/InsertAttachment", ReplyAction="http://tempuri.org/ICommonService/InsertAttachmentResponse")]
        System.Threading.Tasks.Task InsertAttachmentAsync(JustStay.Services.DTO.AttachmentDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/DeleteAttachment", ReplyAction="http://tempuri.org/ICommonService/DeleteAttachmentResponse")]
        void DeleteAttachment(int attchmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/DeleteAttachment", ReplyAction="http://tempuri.org/ICommonService/DeleteAttachmentResponse")]
        System.Threading.Tasks.Task DeleteAttachmentAsync(int attchmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/InsertRating", ReplyAction="http://tempuri.org/ICommonService/InsertRatingResponse")]
        void InsertRating(JustStay.Services.DTO.RatingDto rate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/InsertRating", ReplyAction="http://tempuri.org/ICommonService/InsertRatingResponse")]
        System.Threading.Tasks.Task InsertRatingAsync(JustStay.Services.DTO.RatingDto rate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAllRating", ReplyAction="http://tempuri.org/ICommonService/GetAllRatingResponse")]
        JustStay.Services.DTO.RatingDto[] GetAllRating(int atrcid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/GetAllRating", ReplyAction="http://tempuri.org/ICommonService/GetAllRatingResponse")]
        System.Threading.Tasks.Task<JustStay.Services.DTO.RatingDto[]> GetAllRatingAsync(int atrcid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/Encrypt", ReplyAction="http://tempuri.org/ICommonService/EncryptResponse")]
        string Encrypt(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/Encrypt", ReplyAction="http://tempuri.org/ICommonService/EncryptResponse")]
        System.Threading.Tasks.Task<string> EncryptAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/Decrypt", ReplyAction="http://tempuri.org/ICommonService/DecryptResponse")]
        string Decrypt(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/Decrypt", ReplyAction="http://tempuri.org/ICommonService/DecryptResponse")]
        System.Threading.Tasks.Task<string> DecryptAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/Delete", ReplyAction="http://tempuri.org/ICommonService/DeleteResponse")]
        void Delete(int id, string mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonService/Delete", ReplyAction="http://tempuri.org/ICommonService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id, string mode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommonServiceChannel : JustStay.Web.CommonServiceReference.ICommonService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommonServiceClient : System.ServiceModel.ClientBase<JustStay.Web.CommonServiceReference.ICommonService>, JustStay.Web.CommonServiceReference.ICommonService {
        
        public CommonServiceClient() {
        }
        
        public CommonServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommonServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JustStay.Web.CommonServiceReference.State[] GetAllStates() {
            return base.Channel.GetAllStates();
        }
        
        public System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.State[]> GetAllStatesAsync() {
            return base.Channel.GetAllStatesAsync();
        }
        
        public JustStay.Web.CommonServiceReference.City[] GetAllCities() {
            return base.Channel.GetAllCities();
        }
        
        public System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.City[]> GetAllCitiesAsync() {
            return base.Channel.GetAllCitiesAsync();
        }
        
        public JustStay.Web.CommonServiceReference.City[] GetAllCitiesBySearch(string search) {
            return base.Channel.GetAllCitiesBySearch(search);
        }
        
        public System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.City[]> GetAllCitiesBySearchAsync(string search) {
            return base.Channel.GetAllCitiesBySearchAsync(search);
        }
        
        public JustStay.Web.CommonServiceReference.Location[] GetAlLocationsByCity(int cityId) {
            return base.Channel.GetAlLocationsByCity(cityId);
        }
        
        public System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.Location[]> GetAlLocationsByCityAsync(int cityId) {
            return base.Channel.GetAlLocationsByCityAsync(cityId);
        }
        
        public JustStay.Web.CommonServiceReference.ATRCCategory[] GetAllATRCCategory() {
            return base.Channel.GetAllATRCCategory();
        }
        
        public System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.ATRCCategory[]> GetAllATRCCategoryAsync() {
            return base.Channel.GetAllATRCCategoryAsync();
        }
        
        public JustStay.Web.CommonServiceReference.ATRCSubCategory[] GetAllATRCSubCategory(int categoryid) {
            return base.Channel.GetAllATRCSubCategory(categoryid);
        }
        
        public System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.ATRCSubCategory[]> GetAllATRCSubCategoryAsync(int categoryid) {
            return base.Channel.GetAllATRCSubCategoryAsync(categoryid);
        }
        
        public JustStay.Services.DTO.SettingDto GetSettings() {
            return base.Channel.GetSettings();
        }
        
        public System.Threading.Tasks.Task<JustStay.Services.DTO.SettingDto> GetSettingsAsync() {
            return base.Channel.GetSettingsAsync();
        }
        
        public JustStay.Services.DTO.SMSTemplateDto GetSMSTemplateByName(string name) {
            return base.Channel.GetSMSTemplateByName(name);
        }
        
        public System.Threading.Tasks.Task<JustStay.Services.DTO.SMSTemplateDto> GetSMSTemplateByNameAsync(string name) {
            return base.Channel.GetSMSTemplateByNameAsync(name);
        }
        
        public JustStay.Web.CommonServiceReference.Localities[] GetAutoLocalities(string search) {
            return base.Channel.GetAutoLocalities(search);
        }
        
        public System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.Localities[]> GetAutoLocalitiesAsync(string search) {
            return base.Channel.GetAutoLocalitiesAsync(search);
        }
        
        public JustStay.Web.CommonServiceReference.ATRCType[] GetATRCTypes() {
            return base.Channel.GetATRCTypes();
        }
        
        public System.Threading.Tasks.Task<JustStay.Web.CommonServiceReference.ATRCType[]> GetATRCTypesAsync() {
            return base.Channel.GetATRCTypesAsync();
        }
        
        public JustStay.Services.DTO.AttachmentDto[] GetAttachementsByMaster(int masterId, string tableName) {
            return base.Channel.GetAttachementsByMaster(masterId, tableName);
        }
        
        public System.Threading.Tasks.Task<JustStay.Services.DTO.AttachmentDto[]> GetAttachementsByMasterAsync(int masterId, string tableName) {
            return base.Channel.GetAttachementsByMasterAsync(masterId, tableName);
        }
        
        public void InsertAttachment(JustStay.Services.DTO.AttachmentDto dto) {
            base.Channel.InsertAttachment(dto);
        }
        
        public System.Threading.Tasks.Task InsertAttachmentAsync(JustStay.Services.DTO.AttachmentDto dto) {
            return base.Channel.InsertAttachmentAsync(dto);
        }
        
        public void DeleteAttachment(int attchmentId) {
            base.Channel.DeleteAttachment(attchmentId);
        }
        
        public System.Threading.Tasks.Task DeleteAttachmentAsync(int attchmentId) {
            return base.Channel.DeleteAttachmentAsync(attchmentId);
        }
        
        public void InsertRating(JustStay.Services.DTO.RatingDto rate) {
            base.Channel.InsertRating(rate);
        }
        
        public System.Threading.Tasks.Task InsertRatingAsync(JustStay.Services.DTO.RatingDto rate) {
            return base.Channel.InsertRatingAsync(rate);
        }
        
        public JustStay.Services.DTO.RatingDto[] GetAllRating(int atrcid) {
            return base.Channel.GetAllRating(atrcid);
        }
        
        public System.Threading.Tasks.Task<JustStay.Services.DTO.RatingDto[]> GetAllRatingAsync(int atrcid) {
            return base.Channel.GetAllRatingAsync(atrcid);
        }
        
        public string Encrypt(string data) {
            return base.Channel.Encrypt(data);
        }
        
        public System.Threading.Tasks.Task<string> EncryptAsync(string data) {
            return base.Channel.EncryptAsync(data);
        }
        
        public string Decrypt(string data) {
            return base.Channel.Decrypt(data);
        }
        
        public System.Threading.Tasks.Task<string> DecryptAsync(string data) {
            return base.Channel.DecryptAsync(data);
        }
        
        public void Delete(int id, string mode) {
            base.Channel.Delete(id, mode);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id, string mode) {
            return base.Channel.DeleteAsync(id, mode);
        }
    }
}
